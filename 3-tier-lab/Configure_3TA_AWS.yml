---
- name: Build In-memory inventory for AWS
  hosts: localhost
  gather_facts: false
  become: false
  tasks:
    - include_role:
        name: aws-facts

- name: Wait for AWS infra to be available
  hosts: bastions
  gather_facts: False
  become: false
  tasks:
    - name: Wait for bastion server
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 22
        state: started
        delay: 30
        timeout: 900
        sleep: 30
      delegate_to: localhost

- name: Get ssh keys to connect to the new AWS env
  hosts: bastions
  gather_facts: False
  become: true
  remote_user: "{{ user_name }}"
  vars_files:
    - vars/vars.yml
  tasks:
    - name: Identify pem file location
      find:
        path: /root/.ssh/
        pattern: '*.pem'
      register: result

    - name: save pem file to local directory
      fetch:
        src: "{{ result.files[0].path }}"
        dest: "/tmp/awskey.pem"
        flat: true

    - name: fix permissions of key file
      become: false
      file:
        path: /tmp/awskey.pem
        mode: 0400
      delegate_to: localhost

- name: Enable repos for 3-tier app
  hosts: frontends, apps, appdbs
  gather_facts: False
  remote_user: ec2-user
  vars_files:
    - vars/vars.yml
  tasks:
    - name: Enable repos
      copy:
        src: "files/{{ repo_file }}"
        dest: "/etc/yum.repos.d/{{ repo_file }}"
        mode: 0644

- name: setup frontends
  hosts: frontends
  gather_facts: False
  become: yes
  remote_user: ec2-user
  roles:
    - name: haproxy

- name: setup tomcat
  hosts: apps
  gather_facts: False
  become: yes
  remote_user: ec2-user
  roles:
    - name: tomcat

- name: setup postgresql
  hosts: appdbs
  gather_facts: True
  become: yes
  remote_user: ec2-user
  roles:
    - name: postgres

- name: setup apche
  hosts: apps
  gather_facts: False
  become: yes
  remote_user: ec2-user
  roles:
    - name: apache

- name: Smoke test - Verify HAProxy
  hosts: frontends
  gather_facts: no
  become: no
  remote_user: ec2-user
  tasks:
    - name: Wait for services to start
      wait_for:
        timeout: 30
      delegate_to: localhost

    - name: Get web page content
      uri:
        url: "http://{{ inventory_hostname }}"
        return_content: yes
      register: webpage

    - name: print debug
      debug:
        var: webpage

    - name: Fail if "Welcome to Tomcat" not in the returned content
      fail:
      when: "'Welcome to Tomcat' not in webpage.content"

